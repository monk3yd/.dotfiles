-- Help
-- :h [option_name]
-- :h [option_name] + tab (completion)
-- :options

-- vim.opt.guicursor=
-- vim.opt.relativenumber
-- vim.opt.nu
-- vim.opt.showcmd
-- vim.opt.encoding = 'utf-8'


-- require('plugins')
-- require('settings')
-- require('mapping')
-- require('autocompletion')
-- require('telescope-config')
-- require('lsp-config')

-- Setup nvim-cmp.
local cmp = require("cmp")
local source_mapping = {
	buffer = "[Buffer]",
	nvim_lsp = "[LSP]",
	nvim_lua = "[Lua]",
	cmp_tabnine = "[TN]",
	path = "[Path]",
}
local lspkind = require("lspkind")

cmp.setup({
	snippet = {
		expand = function(args)
			-- For `luasnip` user.
			require("luasnip").lsp_expand(args.body)
		end,
	},
	mapping = cmp.mapping.preset.insert({
        ['<C-y>'] = cmp.mapping.confirm({ select = true }),
		["<C-u>"] = cmp.mapping.scroll_docs(-4),
		["<C-d>"] = cmp.mapping.scroll_docs(4),
		["<C-Space>"] = cmp.mapping.complete(),
	}),

	formatting = {
		format = function(entry, vim_item)
			vim_item.kind = lspkind.presets.default[vim_item.kind]
			local menu = source_mapping[entry.source.name]
			if entry.source.name == "cmp_tabnine" then
				if entry.completion_item.data ~= nil and entry.completion_item.data.detail ~= nil then
					menu = entry.completion_item.data.detail .. " " .. menu
				end
                vim_item.kind = "ïƒ§"
			end
			vim_item.menu = menu
			return vim_item
		end,
	},

	sources = {
		-- tabnine completion? yayaya
		{ name = "cmp_tabnine" },
		{ name = "nvim_lsp" },
		-- For luasnip user.
		{ name = "luasnip" },
		{ name = "buffer" },
	},
})

local tabnine = require("cmp_tabnine.config")
tabnine:setup({
	max_lines = 1000,
	max_num_results = 20,
	sort = true,
	run_on_every_keystroke = true,
	snippet_placeholder = "..",
})

local function config(_config)
	return vim.tbl_deep_extend("force", {
		capabilities = require("cmp_nvim_lsp").update_capabilities(vim.lsp.protocol.make_client_capabilities()),
		on_attach = function()
			nnoremap("gd", ":lua vim.lsp.buf.definition()<CR>")
			nnoremap("K", ":lua vim.lsp.buf.hover()<CR>")
			nnoremap("<leader>vws", ":lua vim.lsp.buf.workspace_symbol()<CR>")
			nnoremap("<leader>vd", ":lua vim.diagnostic.open_float()<CR>")
			nnoremap("[d", ":lua vim.lsp.diagnostic.goto_next()<CR>")
			nnoremap("]d", ":lua vim.lsp.diagnostic.goto_prev()<CR>")
			nnoremap("<leader>vca", ":lua vim.lsp.buf.code_action()<CR>")
			nnoremap("<leader>vrr", ":lua vim.lsp.buf.references()<CR>")
			nnoremap("<leader>vrn", ":lua vim.lsp.buf.rename()<CR>")
			inoremap("<C-h>", "<cmd>lua vim.lsp.buf.signature_help()<CR>")
		end,
	}, _config or {})
end

lspconfig = require('lspconfig')
lspconfig.pyright.setup {config()}
lspconfig.bashls.setup {config()}
lspconfig.dockerls.setup {config()}
lspconfig.vimls.setup {config()}

local snippets_paths = function()
	local plugins = { "friendly-snippets" }
	local paths = {}
	local path
	local root_path = vim.env.HOME .. "/.vim/plugged/"
	for _, plug in ipairs(plugins) do
		path = root_path .. plug
		if vim.fn.isdirectory(path) ~= 0 then
			table.insert(paths, path)
		end
	end
	return paths
end

--  require("luasnip.loaders.from_vscode").lazy_load({
--	paths = snippets_paths(),
--	include = nil, -- Load all languages
--	exclude = {},
--  })

